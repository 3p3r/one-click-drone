'use strict';

const cdk = require('@aws-cdk/core');

const { Database } = require('./database');
const { EFSCache } = require('./efsCache');
const { IAMBucket } = require('./iamBucket');
const { Parameters } = require('./parameters');
const { Networking } = require('./networking');
const { DroneServer } = require('./droneServer');
const { DroneRunner } = require('./droneRunner');

class Stack extends cdk.Stack {
  constructor(scope, id, props) {
    super(scope, id, props);

    // These are JS config files turned into CloudFormation parameters
    const parameters = new Parameters(this);

    // Create a new VPC to house everything under
    const networking = new Networking(this, { parameters });

    // Create a serverless Aurora Postgres database
    const database = new Database(this, { networking, parameters });

    // Logs S3 bucket
    const logsBucket = new IAMBucket(this);

    // Fleet of server instances, running on Fargate
    const droneServer = new DroneServer(this, { database, logsBucket, parameters, networking });

    // Fleet of runner instances, running on EC2 backed ECS daemon containers
    const droneRunner = new DroneRunner(this, { droneServer, networking, parameters });

    // Create a persistent EFS volume for build caching
    new EFSCache(this, { networking, parameters, droneRunner });

    // Output server's address
    const host = droneServer.homepage;
    const hostCondition = new cdk.CfnCondition(this, 'HostCondition', {
      expression: cdk.Fn.conditionEquals(parameters.ServerDomain, ''),
    });

    new cdk.CfnOutput(this, 'DroneHomepage', {
      description: cdk.Fn.sub(
        'This is the homepage of your Drone CI deployment. You should set this in your Github OAuth apps page: https://github.com/settings/developers.${certInstruction}',
        {
          certInstruction: cdk.Fn.conditionIf(
            hostCondition.logicalId,
            '',
            ' You must manually provision a certificate for it in the "us-east-1" (N. Virginia) region and follow https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cnames-and-https-procedures.html to associate it with your CloudFront distribution.'
          ),
        }
      ),
      value: cdk.Fn.sub('https://${host}', { host }),
    });

    new cdk.CfnOutput(this, 'OAuthCallback', {
      description:
        'This is the OAuth callback of your Drone CI deployment. You should set this in your Github OAuth apps page: https://github.com/settings/developers.',
      value: cdk.Fn.sub('https://${host}/login', { host }),
    });

    new cdk.CfnOutput(this, 'CloudFrontURI', {
      description: cdk.Fn.sub('This is the autogenerated CloudFront domain name.${certInstruction}', {
        certInstruction: cdk.Fn.conditionIf(
          hostCondition.logicalId,
          '',
          ' You must manually make a CNAME record for you provided domain to point to this.'
        ),
      }),
      value: droneServer.httpsHost,
    });
  }
}

module.exports = { Stack };
