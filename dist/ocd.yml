Description: "one click deploy of Drone CI into your AWS account with Fargate, RDS, and CloudWatch see: https://github.com/3p3r/one-click-drone#readme"
Parameters:
  DatabaseUsername:
    Type: String
    Default: DroneDBUser
    Description: Database username used by Drone server agents.
    MinLength: 10
  DatabasePassword:
    Type: String
    Default: DroneDBPass
    Description: Database password used by Drone server agents.
    MinLength: 10
    NoEcho: true
  DatabaseSecret:
    Type: String
    Default: change-this-secret
    ConstraintDescription: You can generate a random token with executing "openssl rand -hex 16" in your terminal.
    Description: Database secret used by Drone server agents to encrypt Drone secrets (DRONE_DATABASE_SECRET).
    MinLength: 16
    NoEcho: true
  RunnerContainer:
    Type: String
    Default: drone/drone-runner-docker:1
    Description: Drone docker runner container name and version used.
  RunnerInstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type of Drone Docker Runner agents.
    MinLength: 2
  RunnerJobCapacity:
    Type: Number
    Default: 10
    Description: Max number of build jobs a single runner container accepts (DRONE_RUNNER_CAPACITY).
    MinValue: 2
  RunnerMaxCapacity:
    Type: Number
    Default: 5
    Description: Drone docker runner service auto-scaler limit.
    MinValue: 2
  RunnerAMI:
    Type: String
    Default: ""
    Description: EC2 instance AMI of Drone Docker Runner agents.
  ServerContainer:
    Type: String
    Default: drone/drone:1
    Description: Drone server container name and version used.
  ServerRpcSecret:
    Type: String
    Default: change-this-secret
    ConstraintDescription: You can generate a random token with executing "openssl rand -hex 16" in your terminal.
    Description: Drone shared RPC secret used across all runners and servers (DRONE_RPC_SECRET).
    MinLength: 16
    NoEcho: true
  ServerRepoFilter:
    Type: String
    Default: ""
    Description: Drone repository filter (DRONE_REPOSITORY_FILTER).
  ServerMaxCapacity:
    Type: Number
    Default: 2
    Description: Drone server service auto-scaler limit.
    MinValue: 2
  ServerCookieSecret:
    Type: String
    Default: change-this-secret
    ConstraintDescription: You can generate a random token with executing "openssl rand -hex 16" in your terminal.
    Description: Drone server secret key used to sign authentication cookies (DRONE_COOKIE_SECRET).
    MinLength: 16
    NoEcho: true
  ServerAdmin:
    Type: String
    Default: octocat
    ConstraintDescription: Without this, you will not have an admin user and cannot make trusted builds.
    Description: Drone server admin user (created only during the initial deploy - DRONE_USER_CREATE).
    MinLength: 2
  ServerDomain:
    Type: String
    Default: ""
    Description: If you have a custom CNAME, specify it here. Otherwise a domain will be autogenerated for you.
  GithubServer:
    Type: String
    Default: https://github.com
    Description: Github server used. Change this if using Github enterprise.
  GithubClientId:
    Type: String
    Default: get this from https://github.com/settings/apps !
    ConstraintDescription: "You can obtain this here: https://github.com/settings/apps."
    Description: Github app OAuth clientId (DRONE_GITHUB_CLIENT_ID).
    MinLength: 2
    NoEcho: true
  GithubClientSecret:
    Type: String
    Default: get this from https://github.com/settings/apps !
    ConstraintDescription: "You can obtain this here: https://github.com/settings/apps."
    Description: Github app OAuth clientSecret (DRONE_GITHUB_CLIENT_SECRET).
    MinLength: 2
    NoEcho: true
  CacheCleanerRate:
    Type: String
    Default: 1 day
    Description: The rate at which the cache cleaner runs (CloudWatch rate expression).
  CacheTTLInDays:
    Type: Number
    Default: 7
    Description: Cache files older than this number of days are deleted at "CacheCleanerRate" intervals
    MinValue: 1
  SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
Resources:
  NetworkingVPC47331CE2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/VPC
  NetworkingVPCPublicSubnet1Subnet456768EF:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: NetworkingVPC47331CE2
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/VPC/PublicSubnet1
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
  NetworkingVPCPublicSubnet1RouteTableFB7DB6BF:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: NetworkingVPC47331CE2
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/VPC/PublicSubnet1
  NetworkingVPCPublicSubnet1RouteTableAssociation998A5E8B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: NetworkingVPCPublicSubnet1RouteTableFB7DB6BF
      SubnetId:
        Ref: NetworkingVPCPublicSubnet1Subnet456768EF
  NetworkingVPCPublicSubnet1DefaultRoute87E8EA0A:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: NetworkingVPCPublicSubnet1RouteTableFB7DB6BF
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: NetworkingVPCIGW820460A7
    DependsOn:
      - NetworkingVPCVPCGW3AF12CB4
  NetworkingVPCPublicSubnet1EIP13C5F113:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NetworkingVPCPublicSubnet1NATGateway6E1AC04D:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NetworkingVPCPublicSubnet1EIP13C5F113
          - AllocationId
      SubnetId:
        Ref: NetworkingVPCPublicSubnet1Subnet456768EF
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/VPC/PublicSubnet1
  NetworkingVPCPublicSubnet2Subnet06EE199A:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: NetworkingVPC47331CE2
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/VPC/PublicSubnet2
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
  NetworkingVPCPublicSubnet2RouteTable11EAC724:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: NetworkingVPC47331CE2
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/VPC/PublicSubnet2
  NetworkingVPCPublicSubnet2RouteTableAssociation9794F550:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: NetworkingVPCPublicSubnet2RouteTable11EAC724
      SubnetId:
        Ref: NetworkingVPCPublicSubnet2Subnet06EE199A
  NetworkingVPCPublicSubnet2DefaultRouteFC2DBB44:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: NetworkingVPCPublicSubnet2RouteTable11EAC724
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: NetworkingVPCIGW820460A7
    DependsOn:
      - NetworkingVPCVPCGW3AF12CB4
  NetworkingVPCPublicSubnet2EIPCCDBE401:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NetworkingVPCPublicSubnet2NATGatewayEC7BE373:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - NetworkingVPCPublicSubnet2EIPCCDBE401
          - AllocationId
      SubnetId:
        Ref: NetworkingVPCPublicSubnet2Subnet06EE199A
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/VPC/PublicSubnet2
  NetworkingVPCPrivateSubnet1SubnetA4560E1F:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: NetworkingVPC47331CE2
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/VPC/PrivateSubnet1
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
  NetworkingVPCPrivateSubnet1RouteTableBD91F27D:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: NetworkingVPC47331CE2
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/VPC/PrivateSubnet1
  NetworkingVPCPrivateSubnet1RouteTableAssociation2E7F0CAC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: NetworkingVPCPrivateSubnet1RouteTableBD91F27D
      SubnetId:
        Ref: NetworkingVPCPrivateSubnet1SubnetA4560E1F
  NetworkingVPCPrivateSubnet1DefaultRoute3B75A0EB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: NetworkingVPCPrivateSubnet1RouteTableBD91F27D
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NetworkingVPCPublicSubnet1NATGateway6E1AC04D
  NetworkingVPCPrivateSubnet2Subnet388EEB72:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: NetworkingVPC47331CE2
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/VPC/PrivateSubnet2
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
  NetworkingVPCPrivateSubnet2RouteTable3CDBE855:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: NetworkingVPC47331CE2
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/VPC/PrivateSubnet2
  NetworkingVPCPrivateSubnet2RouteTableAssociation166DD089:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: NetworkingVPCPrivateSubnet2RouteTable3CDBE855
      SubnetId:
        Ref: NetworkingVPCPrivateSubnet2Subnet388EEB72
  NetworkingVPCPrivateSubnet2DefaultRoute958EA54D:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: NetworkingVPCPrivateSubnet2RouteTable3CDBE855
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NetworkingVPCPublicSubnet2NATGatewayEC7BE373
  NetworkingVPCIGW820460A7:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/VPC
  NetworkingVPCVPCGW3AF12CB4:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: NetworkingVPC47331CE2
      InternetGatewayId:
        Ref: NetworkingVPCIGW820460A7
  NetworkingClusterCBCE51DB:
    Type: AWS::ECS::Cluster
  NetworkingClusterDefaultAutoScalingGroupInstanceSecurityGroupC82E7C30:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: one-click-drone-stack/Networking/Cluster/DefaultAutoScalingGroup/InstanceSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/Cluster/DefaultAutoScalingGroup
      VpcId:
        Ref: NetworkingVPC47331CE2
  NetworkingClusterDefaultAutoScalingGroupInstanceRoleFB9BA3B9:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                Fn::Join:
                  - ""
                  - - ec2.
                    - Ref: AWS::URLSuffix
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/Cluster/DefaultAutoScalingGroup
  NetworkingClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicyCD594131:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: NetworkingClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicyCD594131
      Roles:
        - Ref: NetworkingClusterDefaultAutoScalingGroupInstanceRoleFB9BA3B9
  NetworkingClusterDefaultAutoScalingGroupInstanceProfile8F754F00:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: NetworkingClusterDefaultAutoScalingGroupInstanceRoleFB9BA3B9
  NetworkingClusterDefaultAutoScalingGroupLaunchConfig44C22346:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId:
        Fn::If:
          - NetworkingImageConditionA21F73E4
          - Ref: SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter
          - Ref: RunnerAMI
      InstanceType:
        Ref: RunnerInstanceType
      IamInstanceProfile:
        Ref: NetworkingClusterDefaultAutoScalingGroupInstanceProfile8F754F00
      SecurityGroups:
        - Fn::GetAtt:
            - NetworkingClusterDefaultAutoScalingGroupInstanceSecurityGroupC82E7C30
            - GroupId
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - >-
                #!/bin/bash

                echo ECS_CLUSTER=
              - Ref: NetworkingClusterCBCE51DB
              - >-2
                 >> /etc/ecs/ecs.config
                sudo iptables --insert FORWARD 1 --in-interface docker+ --destination 169.254.169.254/32 --jump DROP

                sudo service iptables save

                echo ECS_AWSVPC_BLOCK_IMDS=true >> /etc/ecs/ecs.config

                yum update -y,yum install -y amazon-efs-utils,mkdir -p /mnt/efs,
              - Fn::Sub:
                  - mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${efsId}.efs.${region}.amazonaws.com:/ /mnt/efs
                  - region:
                      Ref: AWS::Region
                    efsId:
                      Ref: EFSCacheEFSCacheVolumeBA7EA186
              - ",chmod 777 /mnt/efs,mount -a"
    DependsOn:
      - NetworkingClusterDefaultAutoScalingGroupInstanceRoleDefaultPolicyCD594131
      - NetworkingClusterDefaultAutoScalingGroupInstanceRoleFB9BA3B9
  NetworkingClusterDefaultAutoScalingGroupASGB6E0698C:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MaxSize:
        Fn::Sub:
          - ${Cap}
          - Cap:
              Ref: RunnerMaxCapacity
      MinSize: "1"
      DesiredCapacity: "1"
      LaunchConfigurationName:
        Ref: NetworkingClusterDefaultAutoScalingGroupLaunchConfig44C22346
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: one-click-drone-stack/Networking/Cluster/DefaultAutoScalingGroup
      VPCZoneIdentifier:
        - Ref: NetworkingVPCPrivateSubnet1SubnetA4560E1F
        - Ref: NetworkingVPCPrivateSubnet2Subnet388EEB72
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: true
  NetworkingClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole3BFBC85A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/Cluster/DefaultAutoScalingGroup
  NetworkingClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy9983754B:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeInstanceStatus
              - ec2:DescribeHosts
            Effect: Allow
            Resource: "*"
          - Action: autoscaling:CompleteLifecycleAction
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:"
                  - Ref: AWS::Partition
                  - ":autoscaling:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - :autoScalingGroup:*:autoScalingGroupName/
                  - Ref: NetworkingClusterDefaultAutoScalingGroupASGB6E0698C
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeTasks
            Effect: Allow
            Resource: "*"
          - Action:
              - ecs:ListContainerInstances
              - ecs:SubmitContainerStateChange
              - ecs:SubmitTaskStateChange
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - NetworkingClusterCBCE51DB
                - Arn
          - Action:
              - ecs:UpdateContainerInstancesState
              - ecs:ListTasks
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - NetworkingClusterCBCE51DB
                    - Arn
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: NetworkingClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy9983754B
      Roles:
        - Ref: NetworkingClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole3BFBC85A
  NetworkingClusterDefaultAutoScalingGroupDrainECSHookFunction9EEAA70D:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          import boto3, json, os, time


          ecs = boto3.client('ecs')

          autoscaling = boto3.client('autoscaling')



          def lambda_handler(event, context):
            print(json.dumps(event))
            cluster = os.environ['CLUSTER']
            snsTopicArn = event['Records'][0]['Sns']['TopicArn']
            lifecycle_event = json.loads(event['Records'][0]['Sns']['Message'])
            instance_id = lifecycle_event.get('EC2InstanceId')
            if not instance_id:
              print('Got event without EC2InstanceId: %s', json.dumps(event))
              return

            instance_arn = container_instance_arn(cluster, instance_id)
            print('Instance %s has container instance ARN %s' % (lifecycle_event['EC2InstanceId'], instance_arn))

            if not instance_arn:
              return

            while has_tasks(cluster, instance_arn):
              time.sleep(10)

            try:
              print('Terminating instance %s' % instance_id)
              autoscaling.complete_lifecycle_action(
                  LifecycleActionResult='CONTINUE',
                  **pick(lifecycle_event, 'LifecycleHookName', 'LifecycleActionToken', 'AutoScalingGroupName'))
            except Exception as e:
              # Lifecycle action may have already completed.
              print(str(e))


          def container_instance_arn(cluster, instance_id):
            """Turn an instance ID into a container instance ARN."""
            arns = ecs.list_container_instances(cluster=cluster, filter='ec2InstanceId==' + instance_id)['containerInstanceArns']
            if not arns:
              return None
            return arns[0]


          def has_tasks(cluster, instance_arn):
            """Return True if the instance is running tasks for the given cluster."""
            instances = ecs.describe_container_instances(cluster=cluster, containerInstances=[instance_arn])['containerInstances']
            if not instances:
              return False
            instance = instances[0]

            if instance['status'] == 'ACTIVE':
              # Start draining, then try again later
              set_container_instance_to_draining(cluster, instance_arn)
              return True

            tasks = instance['runningTasksCount'] + instance['pendingTasksCount']
            print('Instance %s has %s tasks' % (instance_arn, tasks))

            return tasks > 0


          def set_container_instance_to_draining(cluster, instance_arn):
            ecs.update_container_instances_state(
                cluster=cluster,
                containerInstances=[instance_arn], status='DRAINING')


          def pick(dct, *keys):
            """Pick a subset of a dict."""
            return {k: v for k, v in dct.items() if k in keys}
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - NetworkingClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole3BFBC85A
          - Arn
      Runtime: python3.6
      Environment:
        Variables:
          CLUSTER:
            Ref: NetworkingClusterCBCE51DB
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/Cluster/DefaultAutoScalingGroup
      Timeout: 310
    DependsOn:
      - NetworkingClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy9983754B
      - NetworkingClusterDefaultAutoScalingGroupDrainECSHookFunctionServiceRole3BFBC85A
  NetworkingClusterDefaultAutoScalingGroupDrainECSHookFunctionAllowInvokeoneclickdronestackNetworkingClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopic803BD3486ABC4FD8:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - NetworkingClusterDefaultAutoScalingGroupDrainECSHookFunction9EEAA70D
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: NetworkingClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicA7C846AC
  NetworkingClusterDefaultAutoScalingGroupDrainECSHookFunctionTopicA27F7D21:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      TopicArn:
        Ref: NetworkingClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicA7C846AC
      Endpoint:
        Fn::GetAtt:
          - NetworkingClusterDefaultAutoScalingGroupDrainECSHookFunction9EEAA70D
          - Arn
  NetworkingClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole01BC88B3:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
        Version: "2012-10-17"
      Tags:
        - Key: Name
          Value: one-click-drone-stack/Networking/Cluster/DefaultAutoScalingGroup
  NetworkingClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyE84A2536:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Ref: NetworkingClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicA7C846AC
        Version: "2012-10-17"
      PolicyName: NetworkingClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyE84A2536
      Roles:
        - Ref: NetworkingClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole01BC88B3
  NetworkingClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicA7C846AC:
    Type: AWS::SNS::Topic
  NetworkingClusterDefaultAutoScalingGroupLifecycleHookDrainHook8268C8A9:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName:
        Ref: NetworkingClusterDefaultAutoScalingGroupASGB6E0698C
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN:
        Ref: NetworkingClusterDefaultAutoScalingGroupLifecycleHookDrainHookTopicA7C846AC
      RoleARN:
        Fn::GetAtt:
          - NetworkingClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole01BC88B3
          - Arn
    DependsOn:
      - NetworkingClusterDefaultAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicyE84A2536
      - NetworkingClusterDefaultAutoScalingGroupLifecycleHookDrainHookRole01BC88B3
  NetworkingClusterDefaultAutoScalingGroupScalingPolicyRunnerCPUScalingF14F902F:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: NetworkingClusterDefaultAutoScalingGroupASGB6E0698C
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 90
  DatabaseDBSubnetGroupD90D34CC:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Drone CI database cluster subnet group
      SubnetIds:
        - Ref: NetworkingVPCPrivateSubnet1SubnetA4560E1F
        - Ref: NetworkingVPCPrivateSubnet2Subnet388EEB72
  DatabaseDBSecurityGroupEE4BF417:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: one-click-drone-stack/Database/DBSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:5432
          FromPort: 5432
          IpProtocol: tcp
          ToPort: 5432
        - CidrIpv6: ::0/0
          Description: from ::0/0:5432
          FromPort: 5432
          IpProtocol: tcp
          ToPort: 5432
      VpcId:
        Ref: NetworkingVPC47331CE2
  DatabaseDBClusterE237B94C:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      BackupRetentionPeriod: 1
      DatabaseName: drone
      DBClusterIdentifier: one-click-drone-db
      DBSubnetGroupName:
        Ref: DatabaseDBSubnetGroupD90D34CC
      DeletionProtection: false
      EngineMode: serverless
      EngineVersion: "10.7"
      MasterUsername:
        Ref: DatabaseUsername
      MasterUserPassword:
        Ref: DatabasePassword
      Port: 5432
      ScalingConfiguration:
        AutoPause: true
        SecondsUntilAutoPause: 1800
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - Fn::GetAtt:
            - DatabaseDBSecurityGroupEE4BF417
            - GroupId
  IAMBucketBucketUserC7B6B3B7:
    Type: AWS::IAM::User
  IAMBucket01DE49D2:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  IAMBucketPolicy8B60EA35:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: IAMBucket01DE49D2
      PolicyDocument:
        Statement:
          - Action: s3:*
            Effect: Allow
            Principal:
              AWS:
                Fn::GetAtt:
                  - IAMBucketBucketUserC7B6B3B7
                  - Arn
            Resource:
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - IAMBucket01DE49D2
                        - Arn
                    - /*
              - Fn::GetAtt:
                  - IAMBucket01DE49D2
                  - Arn
        Version: "2012-10-17"
  IAMBucketLogsBucketCredentials95C6E785:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName:
        Ref: IAMBucketBucketUserC7B6B3B7
  DronerServerServerAgentsLB5F8B5750:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - DronerServerServerAgentsLBSecurityGroup537BC125
            - GroupId
      Subnets:
        - Ref: NetworkingVPCPublicSubnet1Subnet456768EF
        - Ref: NetworkingVPCPublicSubnet2Subnet06EE199A
      Type: application
    DependsOn:
      - NetworkingVPCPublicSubnet1DefaultRoute87E8EA0A
      - NetworkingVPCPublicSubnet2DefaultRouteFC2DBB44
  DronerServerServerAgentsLBSecurityGroup537BC125:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB oneclickdronestackDronerServerServerAgentsLBFA0BF3AC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: NetworkingVPC47331CE2
  DronerServerServerAgentsLBSecurityGrouptooneclickdronestackDronerServerServerAgentsServiceSecurityGroup9E6029FF805C357FEB:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - DronerServerServerAgentsLBSecurityGroup537BC125
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - DronerServerServerAgentsServiceSecurityGroup6E261677
          - GroupId
      FromPort: 80
      ToPort: 80
  DronerServerServerAgentsLBPublicListener1C41F277:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: DronerServerServerAgentsLBPublicListenerECSGroup4E7E58E0
          Type: forward
      LoadBalancerArn:
        Ref: DronerServerServerAgentsLB5F8B5750
      Port: 80
      Protocol: HTTP
  DronerServerServerAgentsLBPublicListenerECSGroup4E7E58E0:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: NetworkingVPC47331CE2
  DronerServerServerAgentsTaskDefTaskRoleDAF063C2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  DronerServerServerAgentsTaskDef8FFD5F7D:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: AWS_ACCESS_KEY_ID
              Value:
                Ref: IAMBucketLogsBucketCredentials95C6E785
            - Name: AWS_SECRET_ACCESS_KEY
              Value:
                Fn::GetAtt:
                  - IAMBucketLogsBucketCredentials95C6E785
                  - SecretAccessKey
            - Name: AWS_DEFAULT_REGION
            - Name: AWS_REGION
            - Name: DRONE_S3_BUCKET
              Value:
                Ref: IAMBucket01DE49D2
            - Name: DRONE_LOGS_DEBUG
              Value: "true"
            - Name: DRONE_LOGS_COLOR
              Value: "false"
            - Name: DRONE_AGENTS_ENABLED
              Value: "true"
            - Name: DRONE_REPOSITORY_FILTER
              Value:
                Ref: ServerRepoFilter
            - Name: DRONE_GITHUB_SERVER
              Value:
                Ref: GithubServer
            - Name: DRONE_GITHUB_CLIENT_ID
              Value:
                Ref: GithubClientId
            - Name: DRONE_GITHUB_CLIENT_SECRET
              Value:
                Ref: GithubClientSecret
            - Name: DRONE_RPC_SECRET
              Value:
                Ref: ServerRpcSecret
            - Name: DRONE_DATABASE_DRIVER
              Value: postgres
            - Name: DRONE_DATABASE_SECRET
              Value:
                Ref: DatabaseSecret
            - Name: DRONE_DATABASE_DATASOURCE
              Value:
                Fn::Sub:
                  - postgres://${user}:${pass}@${host}:${port}/drone?sslmode=disable
                  - user:
                      Ref: DatabaseUsername
                    pass:
                      Ref: DatabasePassword
                    host:
                      Fn::GetAtt:
                        - DatabaseDBClusterE237B94C
                        - Endpoint.Address
                    port:
                      Fn::GetAtt:
                        - DatabaseDBClusterE237B94C
                        - Endpoint.Port
            - Name: DRONE_COOKIE_SECRET
              Value:
                Ref: ServerCookieSecret
            - Name: DRONE_USER_CREATE
              Value:
                Fn::Sub:
                  - username:${admin},admin:true
                  - admin:
                      Ref: ServerAdmin
            - Name: DRONE_SERVER_HOST
              Value:
                Fn::If:
                  - DronerServerDomainCondition95D255D4
                  - Fn::GetAtt:
                      - DronerServerServerAgentsLB5F8B5750
                      - DNSName
                  - Ref: ServerDomain
            - Name: DRONE_SERVER_PROTO
              Value: https
          Essential: true
          Image:
            Ref: ServerContainer
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: DronerServerServerAgentsTaskDefwebLogGroupBB5BF724
              awslogs-stream-prefix: ServerAgents
              awslogs-region:
                Ref: AWS::Region
          Name: web
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - DronerServerServerAgentsTaskDefExecutionRole3E2EC29D
          - Arn
      Family: oneclickdronestackDronerServerServerAgentsTaskDef93D21E87
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - DronerServerServerAgentsTaskDefTaskRoleDAF063C2
          - Arn
  DronerServerServerAgentsTaskDefwebLogGroupBB5BF724:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  DronerServerServerAgentsTaskDefExecutionRole3E2EC29D:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  DronerServerServerAgentsTaskDefExecutionRoleDefaultPolicy4FAA3E29:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - DronerServerServerAgentsTaskDefwebLogGroupBB5BF724
                - Arn
        Version: "2012-10-17"
      PolicyName: DronerServerServerAgentsTaskDefExecutionRoleDefaultPolicy4FAA3E29
      Roles:
        - Ref: DronerServerServerAgentsTaskDefExecutionRole3E2EC29D
  DronerServerServerAgentsService9052BC33:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: DronerServerServerAgentsTaskDef8FFD5F7D
      Cluster:
        Ref: NetworkingClusterCBCE51DB
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 1
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn:
            Ref: DronerServerServerAgentsLBPublicListenerECSGroup4E7E58E0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - DronerServerServerAgentsServiceSecurityGroup6E261677
                - GroupId
          Subnets:
            - Ref: NetworkingVPCPrivateSubnet1SubnetA4560E1F
            - Ref: NetworkingVPCPrivateSubnet2Subnet388EEB72
    DependsOn:
      - DronerServerServerAgentsLBPublicListenerECSGroup4E7E58E0
      - DronerServerServerAgentsLBPublicListener1C41F277
  DronerServerServerAgentsServiceSecurityGroup6E261677:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: one-click-drone-stack/DronerServer/ServerAgents/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: NetworkingVPC47331CE2
  DronerServerServerAgentsServiceSecurityGroupfromoneclickdronestackDronerServerServerAgentsLBSecurityGroup94D430F080AB53F8D2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - DronerServerServerAgentsServiceSecurityGroup6E261677
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - DronerServerServerAgentsLBSecurityGroup537BC125
          - GroupId
      ToPort: 80
  DronerServerServerAgentsServiceTaskCountTarget46CE55BB:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity:
        Ref: ServerMaxCapacity
      MinCapacity: 1
      ResourceId:
        Fn::Join:
          - ""
          - - service/
            - Ref: NetworkingClusterCBCE51DB
            - /
            - Fn::GetAtt:
                - DronerServerServerAgentsService9052BC33
                - Name
      RoleARN:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":iam::"
            - Ref: AWS::AccountId
            - :role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  DronerServerServerAgentsServiceTaskCountTargetServerCPUScaling1FC5B8FB:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: oneclickdronestackDronerServerServerAgentsServiceTaskCountTargetServerCPUScalingBEE251F0
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: DronerServerServerAgentsServiceTaskCountTarget46CE55BB
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        TargetValue: 90
  DronerServerCloudfrontWrapperCFDistributionF3E827DA:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          ForwardedValues:
            Cookies:
              Forward: all
            QueryString: true
          TargetOriginId: origin1
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginKeepaliveTimeout: 5
              OriginProtocolPolicy: http-only
              OriginReadTimeout: 30
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
            DomainName:
              Fn::GetAtt:
                - DronerServerServerAgentsLB5F8B5750
                - DNSName
            Id: origin1
        PriceClass: PriceClass_100
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
  DroneRunnerRunnerTaskDefTaskRoleC06074C0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  DroneRunnerRunnerTaskDef80AFDA23:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Environment:
            - Name: DRONE_DEBUG
              Value: "true"
            - Name: DRONE_TRACE
              Value: "true"
            - Name: DRONE_RUNNER_CAPACITY
              Value:
                Ref: RunnerJobCapacity
            - Name: DRONE_RPC_HOST
              Value:
                Fn::GetAtt:
                  - DronerServerServerAgentsLB5F8B5750
                  - DNSName
            - Name: DRONE_RPC_PROTO
              Value: http
            - Name: DRONE_RPC_SECRET
              Value:
                Ref: ServerRpcSecret
          Essential: true
          Image:
            Ref: RunnerContainer
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: DroneRunnerRunnerTaskDefrunnerLogGroupFB69A97A
              awslogs-stream-prefix: DroneRunner
              awslogs-region:
                Ref: AWS::Region
          MemoryReservation: 512
          MountPoints:
            - ContainerPath: /var/run/docker.sock
              ReadOnly: false
              SourceVolume: docker-sock
          Name: runner
          PortMappings:
            - ContainerPort: 80
              HostPort: 0
              Protocol: tcp
      ExecutionRoleArn:
        Fn::GetAtt:
          - DroneRunnerRunnerTaskDefExecutionRole761676C2
          - Arn
      Family: oneclickdronestackDroneRunnerRunnerTaskDef01897C32
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - DroneRunnerRunnerTaskDefTaskRoleC06074C0
          - Arn
      Volumes:
        - Host:
            SourcePath: /var/run/docker.sock
          Name: docker-sock
  DroneRunnerRunnerTaskDefrunnerLogGroupFB69A97A:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  DroneRunnerRunnerTaskDefExecutionRole761676C2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  DroneRunnerRunnerTaskDefExecutionRoleDefaultPolicyDE9ED39C:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - DroneRunnerRunnerTaskDefrunnerLogGroupFB69A97A
                - Arn
        Version: "2012-10-17"
      PolicyName: DroneRunnerRunnerTaskDefExecutionRoleDefaultPolicyDE9ED39C
      Roles:
        - Ref: DroneRunnerRunnerTaskDefExecutionRole761676C2
  DroneRunnerService5FFA7809:
    Type: AWS::ECS::Service
    Properties:
      TaskDefinition:
        Ref: DroneRunnerRunnerTaskDef80AFDA23
      Cluster:
        Ref: NetworkingClusterCBCE51DB
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      EnableECSManagedTags: false
      LaunchType: EC2
      SchedulingStrategy: DAEMON
  EFSCacheEFSCacheVolumeBA7EA186:
    Type: AWS::EFS::FileSystem
    Properties:
      LifecyclePolicies:
        - TransitionToIA: AFTER_14_DAYS
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
  EFSCacheEFSSecurityGroupDE059E67:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: one-click-drone-stack/EFSCache/EFSSecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: from 0.0.0.0/0:2049
          FromPort: 2049
          IpProtocol: tcp
          ToPort: 2049
        - CidrIpv6: ::0/0
          Description: from ::0/0:2049
          FromPort: 2049
          IpProtocol: tcp
          ToPort: 2049
      VpcId:
        Ref: NetworkingVPC47331CE2
  EFSCacheEFSMountTarget0C744345F:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: EFSCacheEFSCacheVolumeBA7EA186
      SecurityGroups:
        - Fn::GetAtt:
            - EFSCacheEFSSecurityGroupDE059E67
            - GroupId
      SubnetId:
        Ref: NetworkingVPCPrivateSubnet1SubnetA4560E1F
  EFSCacheEFSMountTarget1CE75F7C4:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId:
        Ref: EFSCacheEFSCacheVolumeBA7EA186
      SecurityGroups:
        - Fn::GetAtt:
            - EFSCacheEFSSecurityGroupDE059E67
            - GroupId
      SubnetId:
        Ref: NetworkingVPCPrivateSubnet2Subnet388EEB72
  EFSCacheCleanerAgentScheduledEventRule5C14EF62:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression:
        Fn::Sub:
          - rate(${rate})
          - rate:
              Ref: CacheCleanerRate
      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - NetworkingClusterCBCE51DB
              - Arn
          EcsParameters:
            TaskCount: 1
            TaskDefinitionArn:
              Ref: EFSCacheCleanerAgentScheduledTaskDef65E805F0
          Id: Target0
          Input: "{}"
          RoleArn:
            Fn::GetAtt:
              - EFSCacheCleanerAgentScheduledTaskDefEventsRoleA60A5103
              - Arn
  EFSCacheCleanerAgentScheduledTaskDefTaskRoleAD005434:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  EFSCacheCleanerAgentScheduledTaskDef65E805F0:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - sh
            - -c
            - Fn::Sub:
                - find /cache -mtime +${expiry} -exec rm -f {} \;
                - expiry:
                    Ref: CacheTTLInDays
          Essential: true
          Image: alpine
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: EFSCacheCleanerAgentScheduledTaskDefScheduledContainerLogGroup7415FD09
              awslogs-stream-prefix: CleanerAgent
              awslogs-region:
                Ref: AWS::Region
          MemoryReservation: 512
          MountPoints:
            - ContainerPath: /cache
              ReadOnly: false
              SourceVolume: efs-cache
          Name: ScheduledContainer
      ExecutionRoleArn:
        Fn::GetAtt:
          - EFSCacheCleanerAgentScheduledTaskDefExecutionRoleDE2D8946
          - Arn
      Family: oneclickdronestackEFSCacheCleanerAgentScheduledTaskDef18498356
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      TaskRoleArn:
        Fn::GetAtt:
          - EFSCacheCleanerAgentScheduledTaskDefTaskRoleAD005434
          - Arn
      Volumes:
        - Host:
            SourcePath: /mnt/efs
          Name: efs-cache
  EFSCacheCleanerAgentScheduledTaskDefScheduledContainerLogGroup7415FD09:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  EFSCacheCleanerAgentScheduledTaskDefExecutionRoleDE2D8946:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
  EFSCacheCleanerAgentScheduledTaskDefExecutionRoleDefaultPolicyC54DB86E:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - EFSCacheCleanerAgentScheduledTaskDefScheduledContainerLogGroup7415FD09
                - Arn
        Version: "2012-10-17"
      PolicyName: EFSCacheCleanerAgentScheduledTaskDefExecutionRoleDefaultPolicyC54DB86E
      Roles:
        - Ref: EFSCacheCleanerAgentScheduledTaskDefExecutionRoleDE2D8946
  EFSCacheCleanerAgentScheduledTaskDefEventsRoleA60A5103:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
        Version: "2012-10-17"
  EFSCacheCleanerAgentScheduledTaskDefEventsRoleDefaultPolicy08BFC885:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: ecs:RunTask
            Condition:
              ArnEquals:
                ecs:cluster:
                  Fn::GetAtt:
                    - NetworkingClusterCBCE51DB
                    - Arn
            Effect: Allow
            Resource:
              Ref: EFSCacheCleanerAgentScheduledTaskDef65E805F0
          - Action: iam:PassRole
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - EFSCacheCleanerAgentScheduledTaskDefExecutionRoleDE2D8946
                - Arn
        Version: "2012-10-17"
      PolicyName: EFSCacheCleanerAgentScheduledTaskDefEventsRoleDefaultPolicy08BFC885
      Roles:
        - Ref: EFSCacheCleanerAgentScheduledTaskDefEventsRoleA60A5103
Conditions:
  NetworkingImageConditionA21F73E4:
    Fn::Equals:
      - Ref: RunnerAMI
      - ""
  DronerServerDomainCondition95D255D4:
    Fn::Equals:
      - Ref: ServerDomain
      - ""
Outputs:
  DronerServerServerAgentsLoadBalancerDNS25381BF4:
    Value:
      Fn::GetAtt:
        - DronerServerServerAgentsLB5F8B5750
        - DNSName
  DronerServerServerAgentsServiceURL64EA8F34:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - DronerServerServerAgentsLB5F8B5750
              - DNSName
  DroneHomepage:
    Description: 'This is the homepage of your Drone CI deployment. You should set this in your Github OAuth apps page: https://github.com/settings/developers. If you specified a custom domain for Drone, you must manually provision a certificate for it in the "us-east-1" (N. Virginia) region and follow https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cnames-and-https-procedures.html to associate it with your CloudFront distribution.'
    Value:
      Fn::Sub:
        - https://${host}
        - host:
            Fn::If:
              - DronerServerDomainCondition95D255D4
              - Fn::GetAtt:
                  - DronerServerServerAgentsLB5F8B5750
                  - DNSName
              - Ref: ServerDomain
  OAuthCallback:
    Description: "This is the OAuth callback of your Drone CI deployment. You should set this in your Github OAuth apps page: https://github.com/settings/developers."
    Value:
      Fn::Sub:
        - https://${host}/login
        - host:
            Fn::If:
              - DronerServerDomainCondition95D255D4
              - Fn::GetAtt:
                  - DronerServerServerAgentsLB5F8B5750
                  - DNSName
              - Ref: ServerDomain
  CloudFrontURI:
    Description: This is the autogenerated CloudFront domain name. If you specified a custom domain for Drone, you must manually make a CNAME record for you provided domain to point to this.
    Value:
      Fn::GetAtt:
        - DronerServerCloudfrontWrapperCFDistributionF3E827DA
        - DomainName

